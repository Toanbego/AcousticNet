## PARAMETERS
[preprocessing]
# Feature parameters:
#       n_fft: Number of fourier transforms executed over the audio sample
#       n_feat: Number of cepstral coefficients extracted from the filterbanks
#       n_filt: Number of filterbanks calculated from the power spectrums

# Minimum length of audio files to extract from. Given in seconds
signal_minimum_length = 3
feature = msfb
audio_folder = msfb
;audio_folder = augmented
activate_thresholding = False
threshold = 0.005
n_fft = 1200
n_feat = 13
n_filt = 26
precision = 10
delta_delta = False
random_extraction = False

# The length of the sample extracted from audio file. Must be smaller than signal length
step_size = 3
# For scalograms, use percentages of full clip instead of seconds. They are all yhe same size. So this will
# make a random slice of x% of the file.
step_size_scalogram = 0.9
rate = 16000

[augmentation]
; Add the augmentations which will be randomly applied with a uniform distribution
augmentations =
time_shift = False
# Possible params are 0.85, 1.2
time_shift_param = 0.85, 1.2
pitch_shift = False
# Possible params are -2, 2
pitch_shift_param = -2, 2

[model]
; Modes:
;       'save_features': Extracts random features from the data set
;       'train_network': Loads features and starts training the network
;       'test_network': Test a network based on a trained model
network_mode = train_network
network_architecture = novel_cnn
; List of currently available networks architectures:
;   novel_cnn
;   novel_cnn_asym
;   novel_cnn_small_kernels
;   d_cnn
;   novel_cnn_bn
no_test_fold = True
# This puts the test fold into the training set. Performance is then measured by the validation set only.

# Generates batches instead of using pre-made features. Set to True then specify path
load_weights = False
load_model = weights\weights.100-0.93_logfbank_fold10.hdf5
test_mode = test_all


# Hyperparameters
fold = 5
randomize_roll = False
learning_rate = 0.001
batch_size = 64
epochs = 150
optimizer = adam

# Tools:
; tensorboard --logdir=logs --host localhost --port 8088
; pip install pywavelets python_speech_features muda jams tqdm resampy sklearn pandas matplotlib
; conda install keras-gpu opencvpython
; [^\x00-\x7f]


;\begin{table}[]
;    \centering
;    \begin{tabular*}{| c {10cm}| c{10cm} |}
;        \hline
;        \textbf{Preprocessing} & \textbf{CNN} \\ [0.5ex]
;        \hline
;        Feature:\null\hfill Log Spectrogram & Network:\null\hfill N-CNN \\
;        \hline
;        FFT Bins (N):\null\hfill 1200 & Test fold:\null\hfill 5 \\
;        \hline
;        Window Size (ms):\null\hfill 25 & Optimizer:\null\hfill ADAM \\
;        \hline
;        Window Step (ms):\null\hfill 10 & Batch Size:\null\hfill 64 \\
;        \hline
;        Filters:\null\hfill N/A & Learning Rate:\null\hfill 0.001 \\
;        \hline
;        Coefficients:\null\hfill N/A & Epochs:\null\hfill150 \\
;        \hline
;        Delta-Delta: \null\hfill False & L2-reg:\null\hfill 0.001 \\
;        \hline
;        Sample Rate (kHz):\null\hfill 16 & Activation:\null\hfill LeakyReLU \\
;        \hline
;        Envelope:\null\hfill True & Loss:\null\hfill Crossentropy \\
;        \hline
;          & Network:\null\hfill N-CNN \\
;        \hline
;    \end{tabular*}
;    \caption{Caption}
;    \label{tab:my_label}
;\end{table}





